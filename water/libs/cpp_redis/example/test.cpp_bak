#include "cpp_redis/cpp_redis"
#include <iostream>
#include <string.h>

using std::cout;
using std::cin;
using std::endl;

int main()
{
	//! Enable logging
	cpp_redis::active_logger = std::unique_ptr<cpp_redis::logger>(new cpp_redis::logger);

	cpp_redis::redis_client client;

	client.connect("127.0.0.1", 6379, [](cpp_redis::redis_client&) {
				   std::cout << "client disconnected (disconnection handler)" << std::endl;
				   });

    volatile bool exiting = false;

    auto callable = 
    [&exiting](cpp_redis::reply& reply)
    {
        std::cout << "set hello 42: " << reply << std::endl;
        std::cout << "callback thread id: " << std::this_thread::get_id() << std::endl;
        while(!exiting)
        {
//            std::cout << "waiting to exit lambda ..." << std::endl;
            std::this_thread::sleep_for(std::chrono::milliseconds(50));
        }
    };

	// same as client.send({ "SET", "hello", "42" }, ...)
    client.set("hello", "42", callable);
    /*
	client.set("hello", "42", [](cpp_redis::reply& reply) {
			   std::cout << "set hello 42: " << reply << std::endl;
			   // if (reply.is_string())
			   //   do_something_with_string(reply.as_string())
			   });
    */
	// same as client.send({ "DECRBY", "hello", 12 }, ...)
	client.decrby("hello", 12, [](cpp_redis::reply& reply) {
				  std::cout << "decrby hello 12: " << reply << std::endl;
				  // if (reply.is_integer())
				  //   do_something_with_integer(reply.as_integer())
				  });

	// same as client.send({ "GET", "hello" }, ...)
	client.get("hello", [](cpp_redis::reply& reply) {
			   std::cout << "get hello: " << reply << std::endl;
			   // if (reply.is_string())
			   //   do_something_with_string(reply.as_string())
			   });

    struct ST
    {
        int i = 1;
        double d = 2.22;
    };
    ST st;
    std::string binData((const char*)(&st), sizeof(st));
    ST st1;
    cout << "binData.size(): " << binData.size() << endl;
    cout << "sizeofST: " << sizeof(ST) << endl;
    binData.copy((char*)&st1, sizeof(st1));
    cout << "desierliers st1, size=" << binData.size() << " {" << st1.i << ", " << st1.d << "}" << endl;
    auto parseBin = [](cpp_redis::reply& replay)
    {
        //cout << "bin replay, get_type: " << replay.get_type() << endl;
        cout << "bin replay, is_bulk_string: " << replay.is_bulk_string() << endl;
        cout << "bin replay, is_string: " << replay.is_string() << endl;
        cout << "bin replay, is_simple_string:" << replay.is_simple_string() << endl;

        ST tmp;
        replay.as_string().copy((char*)&tmp, sizeof(tmp));
        cout << "desierliers replay: {" << tmp.i << ", " << tmp.d << "}" << endl;
    };
    client.send({"set", "st", binData}, parseBin);

	// commands are pipelined and only sent when client.commit() is called
    std::cout << "main thread id: " << std::this_thread::get_id() << std::endl;
	client.commit();

	// synchronous commit, no timeout
	//client.sync_commit();

	// synchronous commit, timeout
	//client.sync_commit(std::chrono::milliseconds(100));

    //client.disconnect(true);

    std::this_thread::sleep_for(std::chrono::seconds(1));
    std::cout << "main thread, set exiting true";
    exiting = true;
    std::this_thread::sleep_for(std::chrono::seconds(1));


	return 0;
}
