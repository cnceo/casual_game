syntax = "proto2";

package PublicProto; 


message S_ServerVersion
{
    required string version      = 1;
    required bool apple_review   = 2; //是否是apple审核版, true 是, false 不是
    optional bool strict_version = 3; //是否严格版本比对, true 是, false 不是
    optional string ios_app_url       = 4; //
    optional string android_app_url   = 5; //
}

//step 1,  client -> gw
enum LoginType_C_Login
{
    LOGINT_VISTOR       = 0; //游客登录
    LOGINT_WETCHAT      = 1; //微信登陆
    LOGINT_HISTOLKEN    = 2; //历史token登陆, 暂时端没有用到
}
message C_Login
{
    required int32  login_type  = 1;  //登陆类型
    required string openid      = 2;  //openid
    required string token       = 3;  //token
    required string nick_name   = 4;  //昵称
    required string imgurl      = 5;  //头像地址
}

//step 2, gw -> client
//登录结果返回
enum RetCode_S_LoginRet
{
    LOGINR_FAILED           = 0;
    LOGINR_SUCCES           = 1;
    LOGINR_HISTOKEN_ILEGAL  = 2; //历史登陆且token不正确
    LOGINR_WCHTTOKEN_ILEGAL = 3; //微信登录且token不正确
}
message S_LoginRet
{
    required int32  ret_code    = 1;
    optional int64  cuid        = 2; //个人ID
    optional string temp_token  = 3;
    optional string ipstr       = 4;
    optional string wechat1     = 5; //微信号1
    optional string wechat2     = 6; //微信号2
    optional string wechat3     = 7; //微信号3
    optional string share_link  = 8; //分享的链接
    repeated Price price_list   = 9; //不同局数的房间, 人头费列表

    message Price
    {
        required int32 rounds   = 1;
        required int32 money    = 2;
    }
}

//玩家基本数据
message S_PlayerBasicData
{
    optional int32  money       = 1;    //货币1
    optional int32  money1      = 2;    //货币2
}


//通知客户端显示系统级推送的文本
message S_Notice
{
    enum Type
    {
        MSG_BOX = 1; //弹窗消息
        NOTICE  = 2; //公告
        ROLLING_BOARD  = 3; //滚动提示
    }
    required Type   type = 1;
    required string text = 2;
}

//聊天信息
enum ChatType
{
    CHAT_TEXT  = 0;
    CHAT_FACE  = 1;
    CHAT_VOICE = 2;
}

message C_SendChat
{
    required ChatType   type        = 1; //聊天的内容类型
    optional int64      data_int    = 3; //整形数据, 表情或语音id
    optional string     data_text   = 4; //字符串型数据, 文字内容
}

message S_Chat
{
    required int64      cuid    = 1; //发送者
    required C_SendChat content = 2; //内容
}

message CS_Heartbeat
{
}

/*****************************13水消息********************************/

//13水, 创建游戏, 即建房间, 成功则返回房间信息
message C_G13_CreateGame
{
    required int32 player_size  = 1; //人数
    required int32 play_type    = 2; //玩法，普通=52，多一色=65
    required int32 rounds       = 3; //局数，8， 12， 16
    required int32 payor        = 4; //支付者, 10=庄家付，11=均摊，12=赢家付
    required int32 da_qiang     = 5; //打枪, 3=3道，2=双倍
    required bool  quan_lei_da  = 6; //全垒打, false=否，true=是
    required int32 yi_tiao_long = 7; //一条龙 倍数
}

//加入房间
message C_G13_JionGame
{
    required int32 room_id    = 1;  //房号
}

//13水, 房间基本信息, 创建, 加入游戏成功的返回消息都是这一条
message S_G13_RoomAttr
{
    required int32 room_id          = 1; //房号
    required int64 banker_cuid      = 2; //庄家(房主)的唯一id
    required C_G13_CreateGame attr  = 3; //房间属性
}

//更新房间成员状态列表, 只发送有变动的players
//房间人员数量或状态发生变动后，会对当前所有成员广播这一消息
message S_G13_PlayersInRoom
{
    enum Status
    {
        NONE    = 0; //空状态
        PREP    = 1; //准备
        READY   = 2; //就绪
        SORT    = 3; //摆牌
        COMPARE = 4; //比牌
        DONE    = 5; //结束
    }
    message PlayerStatus
    {
        required int64 cuid     = 1; //cuid
        required int32 status   = 2; //具体值见上面的枚举定义中的注释
        required string name    = 3; //名字
        required int32 rank     = 4; //当前分数
        required string imgurl  = 5; //头像url
        required string ipstr   = 6; //ip字符串
    }
    repeated PlayerStatus players   = 1;
    required int32 rounds           = 2; //当前是第几局, 准备阶段值为0
}

//放弃游戏, 
//在游戏开始阶段，庄家退出房间自动解散, 非庄家退出只有自己退出
//在游戏进行阶段，退出游戏需要房间投票，通过后游戏自动终止
//结算结束后，房间会保留30s，期间可以自由退出，房主退出不解散房间
message C_G13_GiveUp
{
}

enum G13_VoteOfAbort
{
    VT_NONE = 0;  //未投
    VT_AYE  = 1;  //赞同
    VT_NAY  = 2;  //反对
};

// 关于退出游戏投票的更新和通知
// 收到消息如果自己还未投票，则现实投票界面
message S_G13_AbortGameOrNot
{
    message Vote
    {
        required int64  cuid = 1;
        required int32  vote = 2;
    }
    required int32 remain_seconds   = 1;//剩余秒数
    required int64 sponsor          = 2;//发起者的cuid
    repeated Vote  votes            = 3;//当前票列表
}

// 投票表决是否赞同终止游戏
message C_G13_VoteFoAbortGame
{
    required G13_VoteOfAbort vote = 1;
}

// 投票失败, 游戏继续
message S_G13_VoteFailed
{
    required int64 opponent = 1; //反对者的cuid
}

//玩家已离开游戏, 仅发给自己
message S_G13_PlayerQuited
{
}


//确定游戏开始
message C_G13_ReadyFlag
{
    required bool ready    = 1; // true=设为就绪, false=设为未就绪
}

//拥有的牌(发牌的结果)
message S_G13_HandOfMine
{
    required int32 rounds   = 1;
    repeated int32 cards    = 2;
}

//确认出牌
message C_G13_BringOut
{
    repeated int32 cards    = 1;
    required bool special   = 2; //true 按照特殊牌型算; false 按照一般的牌型算
}

// 所有人的牌, 以及结算结果
message S_G13_AllHands
{
    message BrandInfo //牌型信息
    {
        required int32 brand = 1; //牌型枚举
        required int32 point = 2; //同牌型比大小的点数, 特殊牌型全为0, 等策划补文档
    }
    message Player
    {
        required int64      cuid  = 1;
        repeated int32      cards = 2; //牌组
        required int32      rank  = 3; //单局得分
        required BrandInfo  dun0  = 4; //头墩
        required BrandInfo  dun1  = 5; //中墩
        required BrandInfo  dun2  = 6; //尾墩
        required BrandInfo  spec  = 7; //特殊牌型
    }
    repeated Player players = 1;
}

// 所有局结束, 总结算 
// 此消息发完, 游戏会在稍后自动解散, 期间可以自由离开
message S_G13_AllRounds
{
    message Player
    {
        required int64  cuid        = 1;
        required int32  win         = 2;    //胜利次数
        required int32  daqiang     = 3;    //打枪次数
        required int32  quanleida   = 4;    //全垒打次数, 非全垒打房间值一定为0
        required int32  rank        = 5;    //总得分
    }
    repeated Player players = 1;
}

//请求历史总统计
message C_G13_ReqGameHistoryCount
{
}

//返回历史总统计
message S_G13_GameHistoryCount
{
    required int32 total       = 1;  //总历史记录条目数量
    required int32 week_rank   = 2;  //本周积分
    required int32 week_game   = 3;  //本周场数
    required int32 today_rank  = 4;  //今日积分
    required int32 today_game  = 5;  //今日场数
}

//请求比赛历史详情
message C_G13_ReqGameHistoryDetial
{
    required int32 page = 1; //页码, 从0开始
}

//返回比赛历史详情
message S_G13_GameHistoryDetial
{
    message Game
    {
        message Opponent
        {
            required int64  cuid    = 1;
            required string name    = 2;
            required int32  rank    = 3;
        }
        required int32  roomid  = 1;
        required int32  rank    = 2;
        repeated Opponent opps  = 3;
        required int32  time    = 4;
    }

    repeated Game items = 1;
}

//请求计算模拟牌局的结果
message C_G13_SimulationRound
{
    message BringOutInfo
    {
        required uint64 cuid    = 1;
        repeated int32 cards    = 2;
        required bool special   = 3; //true 按照特殊牌型算; false 按照一般的牌型算
    }
    repeated BringOutInfo players = 1;
}

//返回模拟牌局的计算结果
message S_G13_CalcRoundSimulationRet
{
    required S_G13_AllHands result = 1;
}




